<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jeremy Sze的博客</title>
    <link>https://jeremy95-sze.github.io/</link>
    <description>Recent content on Jeremy Sze的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 11 Nov 2018 08:36:54 -0700</lastBuildDate>
    
	<atom:link href="https://jeremy95-sze.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JPQL注意点</title>
      <link>https://jeremy95-sze.github.io/post/JPQL%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Sun, 11 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/JPQL%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8F%90%E7%A4%BA/</guid>
      <description>原生sql与jpql比较 基于数据库与基于对象的比较 1 2 3 //@Query(value = &amp;#34;select count (*) from tb_friend where userid=?1 and friendid=?2&amp;#34;,nativeQuery = true) @Query(value = &amp;#34;select count(f) from Friend f where f.userid = ?1 and f.friendid = ?2&amp;#34;) int findFriendCount(String userid,String friendid); 上面这两个sql一个使用原生sql，一个使用了jpql语句，原生sql基于数据库表来进行查询，这样要根据条件计算总记录数，那么数据库必须要有值，不然就会报错，比</description>
    </item>
    
    <item>
      <title>SpringCloud总结</title>
      <link>https://jeremy95-sze.github.io/post/SpringCloud/</link>
      <pubDate>Sun, 11 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/SpringCloud/</guid>
      <description>什么是 SpringCloud Spring Cloud 是一系列框架的有序集合。它利用 Spring Boot 的开发便利性巧妙地简化了分布 式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、熔断器、数据 监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。Spring 并没有重复制造轮子， 它只是将目前各家公司开发的比较成熟、经得起实</description>
    </item>
    
    <item>
      <title>JWT总结</title>
      <link>https://jeremy95-sze.github.io/post/JWT%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 09 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/JWT%E6%80%BB%E7%BB%93/</guid>
      <description>BCrypt 密码加密 任何应用考虑到安全，绝不能明文的方式保存密码。密码应该通过哈希算法进行加密。 有很多标准的算法比如 SHA(微信公众号使用) 或者 MD5，结合 salt(盐)是一个不错的选择。 Spring Security 提 供了 BCryptPasswordEncoder 类,实现 Spring 的 PasswordEncoder 接口使用 BCrypt 强哈希方法 来加密密码。 BCrypt 强哈希方法 每次加密的结果都不一样。 BCrypt 密码加</description>
    </item>
    
    <item>
      <title>RabbitMQ总结</title>
      <link>https://jeremy95-sze.github.io/post/RabbitMQ%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 07 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/RabbitMQ%E6%80%BB%E7%BB%93/</guid>
      <description>RabbitMQ 简介 消息队列中间件简介 消息队列中间件是分布式系统中重要的组件，$\color{red}{主要解决应用耦合，异步消息，流量削锋等问 题实现高性能，高可用，可伸缩和最终一致性[架构] }$使用较多的消息队列有 ActiveMQ， RabbitMQ，ZeroMQ，Kafka，MetaMQ，R</description>
    </item>
    
    <item>
      <title>ElasticSearch总结</title>
      <link>https://jeremy95-sze.github.io/post/ElasticSearch/</link>
      <pubDate>Mon, 05 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/ElasticSearch/</guid>
      <description>什么是 ElasticSearch Elasticsearch 是一个实时的分布式搜索和分析引擎。它可以帮助你用前所未有的速度去处理 大规模数据。$\color{red}{ElasticSearch 是一个基于 Lucene 的搜索服务器。}$ 它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Ap</description>
    </item>
    
    <item>
      <title>MongoDB总结</title>
      <link>https://jeremy95-sze.github.io/post/MongoDB%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 03 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/MongoDB%E6%80%BB%E7%BB%93/</guid>
      <description>MongoDB 简介 对于这样的数据，我们更适合使用 MongoDB来实现数据的存储 数据量大 写入操作频繁 价值较低 比如 评论信息 吐槽信息 什么是 MongoDB MongoDB 是一个跨平台的，面向文档的数据库，是当前 NoSQL 数据库产品中 最热门的一种。$\color{red}{它介于关系数据库和非关系数据库之间，是非关系数据库当中功 能最丰</description>
    </item>
    
    <item>
      <title>微服务为什么不用写接口</title>
      <link>https://jeremy95-sze.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E5%86%99%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 02 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E5%86%99%E6%8E%A5%E5%8F%A3/</guid>
      <description>分布式架构 微服务架构 结论 分布式是将controller和service分开的，而且dubbo是需要提供接口进行调用的，因此需要写接口 微服务是将controller，service，dao三层作为一个服务整体，服务与服务之间的调用，则只提供controller rul路由即可</description>
    </item>
    
    <item>
      <title>springdataredis与springCache区别</title>
      <link>https://jeremy95-sze.github.io/post/springdataredis%E4%B8%8EspringCache%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 01 Nov 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/springdataredis%E4%B8%8EspringCache%E5%8C%BA%E5%88%AB/</guid>
      <description>代码实现角度 SpringCache只需要在方法上面加上@Cacable @CacacheEvict就可以实现缓存，比较简单！ Spring Data Redis需要修改原来的方法，加入逻辑才可以实现，相对复杂点！ 存储方式角度 Spring Cache缓存在应用内存中，应用停止，缓存丢失啦！ Spring Data Redis缓存在Redi</description>
    </item>
    
    <item>
      <title>Docker总结</title>
      <link>https://jeremy95-sze.github.io/post/Docker%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 30 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/Docker%E6%80%BB%E7%BB%93/</guid>
      <description>Docker 简介 什么是虚拟化 在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体 资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不 可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部 份是不</description>
    </item>
    
    <item>
      <title>Linux配置静态IP访问总结</title>
      <link>https://jeremy95-sze.github.io/post/VMware%E4%B8%ADCentOS-7%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E5%86%85%E5%A4%96%E7%BD%91/</link>
      <pubDate>Tue, 30 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/VMware%E4%B8%ADCentOS-7%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E5%86%85%E5%A4%96%E7%BD%91/</guid>
      <description>配置环境说明 主机为win7，虚拟机为VMware Workstation 12 Pro中文版，虚拟机中的linux系统为CentOS 7 64位。 1设置虚拟机的网络连接方式 按照如下图设置，英文版的对照设置即可 2配置虚拟机的NAT模式具体地址参数 1）编辑–虚拟网络编辑器–更改设置 2）选择VMnet8–取消勾选使用</description>
    </item>
    
    <item>
      <title>分布式事务总结</title>
      <link>https://jeremy95-sze.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 29 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/</guid>
      <description>事务四大特性 如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性： 原子性（Atomicity） 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。 一致性（Consiste</description>
    </item>
    
    <item>
      <title>springboot总结</title>
      <link>https://jeremy95-sze.github.io/post/springboot%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 27 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/springboot%E6%80%BB%E7%BB%93/</guid>
      <description>Spring简介 原有Spring优缺点分析 Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面</description>
    </item>
    
    <item>
      <title>VUE总结</title>
      <link>https://jeremy95-sze.github.io/post/VUE%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 24 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/VUE%E6%80%BB%E7%BB%93/</guid>
      <description>VueJS 概述与快速入门 VueJS介绍 Vue.js是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。它不仅易于上手，还便于与第三方库或既有项目整合。 官网: https://cn.vuejs.org/ MVVM模式 MVVM是Model-View-ViewModel的简写</description>
    </item>
    
    <item>
      <title>springDataJPA_动态查询总结</title>
      <link>https://jeremy95-sze.github.io/post/springdatajpa%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 22 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/springdatajpa%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2/</guid>
      <description>springDataJpa查询方式 简单查询 JpaRepository&amp;lt;Label,String&amp;gt; 条件查询,条件加分页查询 JpaSpecificationExecutor复杂查询和修改,单表和多表查询 @Query(“sql”,nativeQuery = true或者&amp;quot;jpql&amp;rdquo;) 修改时记得@Modify 命名查询 1 2</description>
    </item>
    
    <item>
      <title>springDataJPA总结</title>
      <link>https://jeremy95-sze.github.io/post/springDataJPA%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 21 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/springDataJPA%E6%80%BB%E7%BB%93/</guid>
      <description>Spring Data JPA概述 Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据库的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！ Spring Data JPA 让我们解脱了DAO层的操作，基本上所有CRUD都可以依</description>
    </item>
    
    <item>
      <title>JPA总结</title>
      <link>https://jeremy95-sze.github.io/post/JPA/</link>
      <pubDate>Fri, 19 Oct 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/JPA/</guid>
      <description>ORM概述及特点 概述 ORM（Object-Relational Mapping） 表示对象关系映射。在面向对象的软件开发中，通过ORM，就可以把对象映射到关系型数据库中。只要有一套程序能够做到建立对象与数据库的关联，操作对象就可以直接操作数据库数据，就可以说这套程序实现了ORM对象关</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://jeremy95-sze.github.io/about/</link>
      <pubDate>Fri, 29 Jun 2018 11:43:30 +0800</pubDate>
      
      <guid>https://jeremy95-sze.github.io/about/</guid>
      <description>我的github https://github.com/Jeremy95-Sze/ 我的博客 https://www.cnblogs.com/Jeremy95-Sze</description>
    </item>
    
    <item>
      <title>git总结</title>
      <link>https://jeremy95-sze.github.io/post/git%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 08 Jan 2018 08:36:54 -0700</pubDate>
      
      <guid>https://jeremy95-sze.github.io/post/git%E6%80%BB%E7%BB%93/</guid>
      <description>git介绍 同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代,Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，Linux系统已经发展了十年了，代码库之大让Linus很难继</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://jeremy95-sze.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jeremy95-sze.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://jeremy95-sze.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jeremy95-sze.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>